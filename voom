#!/usr/bin/env bash
#
# A Vim plugin manager designed to work with Vim 8 packages (or vim-pathogen).
#
# SYNOPSIS
#
#   voom
#   voom [update [-q] <name>]
#   voom edit
#
# USAGE
#
#   1. Run `voom edit` to edit your plugin manifest.
#   2. Run `voom` to install/uninstall; `voom update` to update already-installed plugins.
#

set -euo pipefail
shopt -s inherit_errexit nullglob

cd

if [[ -n "${VIM_BUNDLE_DIR:-}" ]]; then
  echo VIM_BUNDLE_DIR is deprecated. Please use VIM_PLUGINS_DIR instead.
  PLUGINS_DIR="$VIM_BUNDLE_DIR"
fi

USAGE="Usage: $(basename "$0") [update [-q] <name>] [edit]"

VIM_DIR="${VIM_DIR:-$HOME/.vim}"
MANIFEST="$VIM_DIR/plugins"
PLUGINS_DIR="${VIM_PLUGINS_DIR:-$VIM_DIR/pack/voom/start}"
COMMENT='^#'
GIT_REMOTE='^[^:/]+:'
GITHUB_REMOTE='^[^/]+/[^/]+$'

if ! test -f "$MANIFEST"; then
  echo >&2 "Could not locate '$MANIFEST'."
  exit 1
fi

is_nvim() {
  if [[ $VIM_DIR =~ nvim ]]; then
    return 0
  else
    return 1
  fi
}

edit_manifest() {
  "${EDITOR:-vim}" "$MANIFEST"
}

remote_repo() {
  local repo=$1
  if [[ "$repo" =~ $GITHUB_REMOTE ]]; then
    printf "https://github.com/%s.git" "$repo"
  elif [[ "$repo" =~ $GIT_REMOTE ]]; then
    printf "%s" "$repo"
  fi
  # Otherwise, it's a local repo
}

install_plugin() {
  local line="$1"
  [[ -z "$line" ]] && return
  [[ "$line" =~ $COMMENT ]] && return

  local plugin_name=${line##*/}

  if ! [[ -d "$PLUGINS_DIR/$plugin_name" ]]; then
    local repo
    repo=$(remote_repo "$line")
    if [[ -n "$repo" ]]; then
      git clone --depth 1 "$repo" "$PLUGINS_DIR/$plugin_name" >/dev/null 2>&1
    else
      ln -nfs "${line/#\~/$HOME}" "$PLUGINS_DIR/$plugin_name"
    fi
    echo "installed $plugin_name"
  fi
}

uninstall_plugin() {
  local dir="$1"
  [[ -z "$dir" ]] && return 1
  local plugin_name=${dir##*/} plugin_remote
  plugin_remote=$(remote_repo "$(grep -v "$COMMENT" "$MANIFEST" | grep "/$plugin_name\$")")

  local remove=0
  if ! ((remove)); then
    [[ -z "$plugin_remote" ]] && remove=1
  fi
  if ! ((remove)); then
    pushd "$dir" >/dev/null
    [[ -d .git ]] && [[ "$(git remote get-url origin)" != "$plugin_remote" ]] && remove=1
    popd >/dev/null
  fi
  if ((remove)); then
    rm -rf "$dir"
    echo "uninstalled $plugin_name"
  fi
}

update_plugin() {
  local dir="$1"
  local quiet="${2:-0}"
  local plugin_name=${dir##*/}
  if ! [[ -L "$dir" ]]; then
    pushd "$dir" >/dev/null
    local branch upstream installed
    branch=$(git symbolic-ref --short HEAD)
    upstream=$(git ls-remote --heads origin "$branch" | awk '{print $ 1}')
    installed=$(git rev-parse "$branch")
    if ! [[ "$upstream" == "$installed" ]]; then
      if ! git pull -q; then
        git fetch -q origin
        git reset -q --hard origin/HEAD
      fi
      local commits log=""
      commits=$(git rev-list --left-only --count "$upstream"..."$installed")
      if ! ((quiet)); then
        log="$(git log --oneline "$installed".."$upstream")\n\n"
      fi
      printf "updated %s: %i commit(s)\n%b" "$plugin_name" "$commits" "$log"
    fi
    popd >/dev/null
  fi
}

install_missing_plugins() {
  while read -r line; do
    install_plugin "$line" &
  done <"$MANIFEST"
  wait
}

uninstall_unwanted_plugins() {
  for dir in "$PLUGINS_DIR"/*/; do
    uninstall_plugin "${dir%/}"
  done
}

update_help_tags() {
  if is_nvim; then
    local cmd=nvim
  else
    local cmd=vim
  fi

  $cmd -c 'helptags ALL' -c 'quit' 1>/dev/null 2>/dev/null
}

args=()
for arg; do
  case "$arg" in
  --help)
    args+=(-h)
    ;;
  --*)
    action=error
    ;;
  -*)
    args=("$arg" "${args[@]}")
    ;;
  *)
    args+=("$arg")
    ;;
  esac
done
set -- "${args[@]}"

quiet=0
while getopts 'hq' arg; do
  case "$arg" in
  q)
    quiet=1
    ;;
  h | ?)
    action=help
    ;;
  esac
done
shift $((OPTIND - 1))

case ${action:=${1:-}} in
'')
  uninstall_unwanted_plugins
  install_missing_plugins
  update_help_tags
  ;;
edit)
  edit_manifest
  install_missing_plugins
  uninstall_unwanted_plugins
  update_help_tags
  ;;
update)
  shift
  for dir in "$PLUGINS_DIR"/*; do
    plugin_name=${dir##*/}
    [[ -n "${1:-}" ]] && [[ "${1:-}" != "$plugin_name" ]] && continue
    update_plugin "$dir" $quiet &
  done
  wait
  update_help_tags
  ;;
help | --help | -h)
  echo "$USAGE"
  ;;
*)
  echo >&2 "$USAGE"
  exit 1
  ;;
esac
