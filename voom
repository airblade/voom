#!/usr/bin/env bash
#
# A Vim plugin manager designed to work with Vim 8 packages (or vim-pathogen).
#
# SYNOPSIS
#
#   voom
#   voom [update <name>]
#   voom edit
#
# USAGE
#
#   1. Run `voom edit` to edit your plugin manifest.
#   2. Run `voom` to install/uninstall; `voom update` to update already-installed plugins.
#


set -e

if [ -n "$VIM_BUNDLE_DIR" ]; then
  echo VIM_BUNDLE_DIR is deprecated. Please use VIM_PLUGINS_DIR instead.
  PLUGINS_DIR="$VIM_BUNDLE_DIR"
fi

VIM_DIR="${VIM_DIR:-$HOME/.vim}"
MANIFEST="$VIM_DIR/plugins"
PLUGINS_DIR="${VIM_PLUGINS_DIR:-$VIM_DIR/pack/voom/start}"
COMMENT='^#'
action="$1"


test -f "$MANIFEST" || {
  echo >&2 "Could not locate '$MANIFEST'."
  exit 1
}

edit_manifest() {
  "${EDITOR:-vim}" "$MANIFEST"
}

is_remote_repo() {
  local slashes="${1//[^\/]}"
  local count="${#slashes}"
  [ "$count" -eq 1 ]
}

install_plugin() {
  local line="$1"
  ([ -z "$line" ] || [[ "$line" =~ $COMMENT ]]) && return

  local plugin_name=${line##*/}

  [ -d "$PLUGINS_DIR/$plugin_name" ] || {
    if is_remote_repo "$line"; then
      git clone --depth 1 "https://github.com/$line.git" "$PLUGINS_DIR/$plugin_name" >/dev/null 2>&1
    else
      ln -nfs "$line" "$PLUGINS_DIR/$plugin_name"
    fi
    echo "installed $plugin_name"
  }
}

uninstall_plugin() {
  local dir="$1"
  [ -z "$dir" ] && return 1
  plugin_name=${dir##*/}
  (grep -v "$COMMENT" "$MANIFEST" | grep -q "$plugin_name") || {
    rm -rf "$dir"
    echo "uninstalled $plugin_name"
  }
}

update_plugin() {
  local dir="$1"
  local plugin_name=${dir##*/}
  [ -L "$dir" ] || {
    cd "$dir"
    upstream=$(git ls-remote --heads origin master | awk '{print $1}')
    installed=$(git rev-parse master)
    [ "$upstream" == "$installed" ] || {
      git pull -q
      log="$(git log --oneline "$installed".."$upstream")"
      commits=$(git rev-list --left-only --count "$upstream"..."$installed")
      printf "updated %s: %i commit(s)\n%s\n\n" "$plugin_name" "$commits" "$log"
    }
  }
}

install_missing_plugins() {
  while read -r line; do
    install_plugin "$line" &
  done < "$MANIFEST"
  wait
}

uninstall_unwanted_plugins() {
  for dir in $PLUGINS_DIR/*; do
    uninstall_plugin "$dir"
  done
}

case $action in
'')
  install_missing_plugins
  uninstall_unwanted_plugins
  ;;

edit)
  edit_manifest
  install_missing_plugins
  uninstall_unwanted_plugins
  ;;

update)
  for dir in $PLUGINS_DIR/*; do
    plugin_name=${dir##*/}
    [ -n "$2" ] && [ "$2" != "$plugin_name" ] && continue
    update_plugin "$dir" &
  done
  wait
  ;;

help | --help | -h)
  echo "Usage: $(basename "$0") [update <name>] [edit]"
  ;;

*)
  echo >&2 "Usage: $(basename "$0") [update <name>] [edit]"
  exit 1
  ;;
esac

