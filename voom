#!/usr/bin/env bash
#
# A Vim plugin manager designed to work with Vim 8 packages (or vim-pathogen).
#
# SYNOPSIS
#
#   voom
#   voom [update [-q] <name>]
#   voom edit
#
# USAGE
#
#   1. Run `voom edit` to edit your plugin manifest.
#   2. Run `voom` to install/uninstall; `voom update` to update already-installed plugins.
#


set -e

if [ -n "$VIM_BUNDLE_DIR" ]; then
  echo VIM_BUNDLE_DIR is deprecated. Please use VIM_PLUGINS_DIR instead.
  PLUGINS_DIR="$VIM_BUNDLE_DIR"
fi

VIM_DIR="${VIM_DIR:-$HOME/.vim}"
MANIFEST="$VIM_DIR/plugins"
PLUGINS_DIR="${VIM_PLUGINS_DIR:-$VIM_DIR/pack/voom/start}"
COMMENT='^#'
action="$1"


test -f "$MANIFEST" || {
  echo >&2 "Could not locate '$MANIFEST'."
  exit 1
}

is_nvim() {
  if [[ $VIM_DIR =~ nvim ]]; then
    return 0
  else
    return 1
  fi
}

edit_manifest() {
  "${EDITOR:-vim}" "$MANIFEST"
}

remote_repo() {
  local repo=$1
  [[ $repo = http://* || $repo = https://* ]] && printf "%s.git" "$repo" && return
  local slashes="${repo//[^\/]}"
  local count="${#slashes}"
  [ "$count" -eq 1 ] && printf "https://github.com/%s.git" "$repo" && return
  # Otherwise, it's a local repo
}

install_plugin() {
  local line="$1"
  ([ -z "$line" ] || [[ "$line" =~ $COMMENT ]]) && return

  local plugin_name=${line##*/}

  [ -d "$PLUGINS_DIR/$plugin_name" ] || {
    local repo=$(remote_repo "$line")
    if [[ -n "$repo" ]]; then
      git clone --depth 1 "$repo" "$PLUGINS_DIR/$plugin_name" >/dev/null 2>&1
    else
      ln -nfs "$line" "$PLUGINS_DIR/$plugin_name"
    fi
    echo "installed $plugin_name"
  }
}

uninstall_plugin() {
  local dir="$1"
  [ -z "$dir" ] && return 1
  plugin_name=${dir##*/}
  (grep -v "$COMMENT" "$MANIFEST" | grep -q "$plugin_name") || {
    rm -rf "$dir"
    echo "uninstalled $plugin_name"
  }
}

update_plugin() {
  local dir="$1"
  local quiet="$2"
  local plugin_name=${dir##*/}
  [ -L "$dir" ] || {
    cd "$dir"
    local branch=$(git symbolic-ref --short HEAD)
    local upstream=$(git ls-remote --heads origin $branch | awk '{print $1}')
    local installed=$(git rev-parse $branch)
    [ "$upstream" == "$installed" ] || {
      git pull -q
      local commits=$(git rev-list --left-only --count "$upstream"..."$installed")
      local log
      [ "$quiet" != 1 ] && log="$(git log --oneline "$installed".."$upstream")\n\n"
      printf "updated %s: %i commit(s)\n%b" "$plugin_name" "$commits" "$log"
    }
  }
}

install_missing_plugins() {
  while read -r line; do
    install_plugin "$line" &
  done < "$MANIFEST"
  wait
}

uninstall_unwanted_plugins() {
  for dir in $PLUGINS_DIR/*; do
    uninstall_plugin "$dir"
  done
}

update_help_tags() {
  if is_nvim; then
    local cmd=nvim
  else
    local cmd=vim
  fi

  $cmd -c 'helptags ALL' -c 'quit'
}

case $action in
'')
  install_missing_plugins
  uninstall_unwanted_plugins
  update_help_tags
  ;;

edit)
  edit_manifest
  install_missing_plugins
  uninstall_unwanted_plugins
  update_help_tags
  ;;

update)
  shift
  if [[ "$1" = "-q" ]]; then
    quiet=1
    shift
  else
    quiet=0
  fi
  for dir in $PLUGINS_DIR/*; do
    plugin_name=${dir##*/}
    [ -n "$1" ] && [ "$1" != "$plugin_name" ] && continue
    update_plugin "$dir" $quiet &
  done
  wait
  update_help_tags
  ;;

help | --help | -h)
  echo "Usage: $(basename "$0") [update [-q] <name>] [edit]"
  ;;

*)
  echo >&2 "Usage: $(basename "$0") [update [-q] <name>] [edit]"
  exit 1
  ;;
esac

